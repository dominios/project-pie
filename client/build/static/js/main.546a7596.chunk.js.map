{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleClick","fetch","then","response","console","info","handleChangeComplete","e","method","headers","Content-Type","body","JSON","stringify","rgb","document","requestFullscreen","react_default","a","createElement","className","lib","onChangeComplete","this","disableAlpha","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNA4FeA,qNAjFbC,YAAc,WACZC,MAAM,kBACHC,KAAK,SAAUC,GACdC,QAAQC,KAAK,iBAAkBF,QAIrCG,qBAAuB,SAACC,GACtBH,QAAQC,KAAKE,GACbN,MAAM,cAAe,CACnBO,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,EAAEO,OAEtBZ,KAAK,SAAUC,GACdC,QAAQC,KAAK,iBAAkBF,0FApBnCY,SAASJ,KAAKK,qDAyBd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,iCAGFF,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4CACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kDAIfH,EAAAC,EAAAC,cAAA,WAASC,UAAU,UACjBH,EAAAC,EAAAC,cAAA,uBADF,IACuBF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAGpCH,EAAAC,EAAAC,cAACE,EAAA,aAAD,CACEC,iBAAkBC,KAAKjB,qBACvBkB,cAAc,IAOhBP,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAGfH,EAAAC,EAAAC,cAAA,WAASC,UAAU,WAEjBH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAGfH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAGfH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAGfH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BA7EPK,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASlB,SAASmB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.546a7596.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\n\nimport './App.scss';\n\nclass App extends Component {\n\n  componentWillMount () {\n    document.body.requestFullscreen();\n  }\n\n  handleClick = () => {\n    fetch('/api/v1/random')\n      .then(function (response) {\n        console.info('fetch response', response);\n      });\n  }\n\n  handleChangeComplete = (e) => {\n    console.info(e);\n    fetch('/api/v1/set', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(e.rgb)\n    })\n      .then(function (response) {\n        console.info('fetch response', response);\n      });\n  }\n\n  render () {\n    return (\n      <div className=\"app\">\n\n        <header>\n          <h1>Light Configurator</h1>\n        </header>\n\n        <section className=\"indicators\">\n          <i className=\"fas fa-2x fa-fw fa-power-off text-white\"></i>\n          <i className=\"fas fa-2x fa-fw fa-wifi text-danger blinking\"></i>\n          {/* <i className=\"fas fa-2x fa-fw fa-wifi text-success\"></i> */}\n        </section>\n\n        <section className=\"preset\">\n          <span>TV Mode</span> <i className=\"fas fa-caret-down\"></i>\n        </section>\n\n        <ChromePicker\n          onChangeComplete={this.handleChangeComplete}\n          disableAlpha={true}\n        />\n\n        {/* <button className=\"toggle\" onClick={this.handleClick}>\n          <i className=\"fas fa-power-off\"></i>\n        </button> */}\n\n        <section className=\"brightness\">\n          <i className=\"far fa-lightbulb\"></i>\n          <div className=\"slider\">\n            <div className=\"handle\"></div>\n          </div>\n          <i className=\"fas fa-lightbulb\"></i>\n        </section>\n\n        <section className=\"buttons\">\n\n          <div>\n            <i className=\"fas fa-redo\"></i>\n          </div>\n\n          <div>\n            <i className=\"fas fa-angle-left\"></i>\n          </div>\n\n          <div>\n            <i className=\"fas fa-angle-right\"></i>\n          </div>\n\n          <div>\n            <i className=\"fas fa-palette\"></i>\n          </div>\n\n        </section>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}